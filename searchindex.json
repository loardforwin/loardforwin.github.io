{"categories":[{"title":"学习","uri":"https://loardforwin.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"posts":[{"content":"类的加载器 ClassLoader ——————运行class，加载到内存，方法区\n 加载器用IO流对象将class文件加载到内存\n三个加载器都是CLassLoader的子类\n类的加载器特性：双亲委派，谁用谁加载\n​\t先传给App的双亲，如果加载则停止App,否则最后传回App自己执行\n 1. 引导类加载器 BootClassLoader ​\t负责加载JDK中的核心类库（JDK安装目录，jre/lib/rt.jar）\n2. 扩展类加载器 ExtClassLoader ExtClassLoader extends URLClassLoader\n​\t负责加载JDK的扩展类库（JDK安装目录，jre/lib/ext/*）\n​\tDNSNameService属于JDK 的扩展类库 sun.misc.Launcher$ExtClassLoader@677327b6\nClassLoader classLoader = DNSNameService.class.getClassLoader; System.out.println(classLoader)；  //结果 sun.misc.Launcher$ExtClassLoader@677327b6  3. 应用类加载器 AppClassLoader AppClassLoader extends URLClassLoader\n​\t加载的是我们自己写的类（负责加载第三方jar包，commonsIO等）sun.misc.Launcher$AppClassLoader@18b4aac2\n  可能出现的问题，如下  //查看加载器的类型 Eg:String类 ClassLoader classLoader = String.class.getClassLoader; System.out.println(classLoader)；  //结果 null//出现null的情况原因：类的加载器是C++编写的，和Java根本无关，所以看不到它加载器的类型  ","id":0,"section":"posts","summary":"类的加载器 ClassLoader ——————运行class，加载到内存，方法区 加载器用IO流对象将class文件加载到内存 三个加载器都是CLassLoader的","tags":["学习小结"],"title":"类的加载器ClassLoader","uri":"https://loardforwin.github.io/2020/08/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8-classloader/","year":"2020"},{"content":"反射（Reflect） 反射关键对象：class文件对象\n类加载器创建，获取使用\n三种方法：\n​\t1：对象的方法getClass()获取（getClass()定义在Object类）\n​\t2: 使用类的静态属性class获取\n​\t3：Class类静态方法forName()获取（常用：扩展性好）\n暴力反射方法执行方法：Class类类名.getDeclaredConstructor()\n 不建议使用\n 注意:方法后面加s则去除所有构造\nConstructor 构造方法对象\nFiled 成员变量对象(字段)\nMethod 成员方法对象\n 三者共同继承了父类AccessibleObject\n父类方法setAccessible(true) 取消Java运行时期的安全检查\n在暴力反射后使用\n 随笔  properties文件建立在src文件下\n  项目开发完毕，交给用户使用，是编译后的class文件\nsrc源代码，编译后产生class文件，是同步的\n  如何读取src文件，使用类的加载器\nClassLoader 类定义方法\n​\tInputStream getResourceAsStream(\u0026ldquo;文件名\u0026rdquo;) 返回字节输入流\n​\t此流会自动从类目录下扫描文件读取\n public class Test{ //Test的类加载器，必须先获取到这个类的class文件对象 ClassLoader loader=Test.class.getClassLoader(); //System.out.println(loader);//Launcher$AppClassLoader@18b4aac2 //加载器获取字节输入流 InputStream inputStream=loader.getResourceAsStream(\u0026quot;config.properties\u0026quot;); System.out.println(inputStream); //流对象和集合关联使用 Properties properties=new Properties(); properties.load(inputStream); inputStream.close(); System.out.println(properties); //集合方法，获取值 String className=properties.getProperty(\u0026quot;className\u0026quot;); String methodName=properties.getProperty(\u0026quot;methodName\u0026quot;); //反射，获取这个类的class文件对象 Class c=Class.forName(className); //创建对象 Object object=c.newInstance(); //获取方法 Method method=c.getMethod(methodName); //运行方法 method.invoke(object);  config.properties文件内容\nclassName=XXX methodName=XXX  ","id":1,"section":"posts","summary":"反射（Reflect） 反射关键对象：class文件对象 类加载器创建，获取使用 三种方法： ​ 1：对象的方法getClass()获取（getCla","tags":["随笔","学习小结"],"title":"反射","uri":"https://loardforwin.github.io/2020/08/%E5%8F%8D%E5%B0%84/","year":"2020"},{"content":"我的第一篇博客——博客相关命令 1.创建博客 1.hugo new posts/FileName.md\n2.hugo server -t pure \u0026ndash;buildDrafts //测试静态博客\n3.cd daydream\n4.hugo server -t pure \u0026ndash;buildDrafts\n5.hugo \u0026ndash;theme=pure \u0026ndash;baseUrl=\u0026quot;https://loardforwin.github.io\u0026rdquo; \u0026ndash;buildDrafts\n6.cd public\n7.git add .\n8.git commit -m \u0026ldquo;这是我的博客\u0026rdquo;\n9.cd..\n10.git remote add origin https://github.com/loardforwin/loardforwin.github.io.git\n11.git push -u origin master\n2.博客的更新 1.hugo \u0026ndash;theme=pure \u0026ndash;baseUrl=\u0026quot;https://loardforwin.github.io\u0026rdquo; \u0026ndash;buildDrafts\n2.cd public\n3.git add .\n4.git commit -m \u0026ldquo;这是我的博客\u0026rdquo;\n5.git push -u origin master\n3.创建博客的md文件 1.hugo new xxx.md\n 头文件上的标识\n分类 categories: [\u0026ldquo;xxx\u0026rdquo;,\u0026ldquo;xxx\u0026rdquo;]\n标签 tags: [\u0026ldquo;xxx\u0026rdquo;,\u0026ldquo;xxx\u0026rdquo;]\n描述 description: \u0026ldquo;xxxxxx\u0026rdquo;\n ","id":2,"section":"posts","summary":"我的第一篇博客——博客相关命令 1.创建博客 1.hugo new posts/FileName.md 2.hugo server -t pure \u0026ndash;buildDrafts //测试静态博客 3.cd daydream 4.hugo server -t pure \u0026ndash;buildDrafts 5.hugo \u0026ndash;theme=pure \u0026ndash;baseUrl=\u0026quot;https://loardforwin.github.io\u0026rdquo; \u0026ndash;buildDrafts 6.cd public 7.git add . 8.git commit -m \u0026ldquo;这是我的博客\u0026","tags":["hogo博客命令"],"title":"我的第一篇博客——博客相关命令","uri":"https://loardforwin.github.io/2020/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E5%8D%9A%E5%AE%A2%E5%91%BD%E4%BB%A4/","year":"2020"}],"tags":[{"title":"about","uri":"https://loardforwin.github.io/tags/about/"},{"title":"hogo博客命令","uri":"https://loardforwin.github.io/tags/hogo%E5%8D%9A%E5%AE%A2%E5%91%BD%E4%BB%A4/"},{"title":"学习小结","uri":"https://loardforwin.github.io/tags/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"},{"title":"随笔","uri":"https://loardforwin.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}